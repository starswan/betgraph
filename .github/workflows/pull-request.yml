name: Ruby

on:
  pull_request:
    branches: [ "main" ]

jobs:
  test:

    runs-on: ubuntu-22.04
    strategy:
      matrix:
        ruby-version: ['3.2', '3.3']

    services:
      postgres:
        # Docker Hub image
        image: postgres
        env:
          POSTGRES_USER: rails
          POSTGRES_PASSWORD: 123rails!
          POSTGRES_DATABASE: betgraph_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    env:
      RAILS_ENV: test
      RAPID_API_KEY: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up CMake for undercover gem
        uses: lukka/get-cmake@latest

      - name: Update to latest
        run: sudo apt update

      - name: Install libcurl for 'curb' gem
        run: sudo apt install libcurl4-openssl-dev

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - name: Pronto Rubocop
        run: bundle exec pronto run -r rubocop -f github_pr -c origin/${{ github.base_ref }}
        env:
          RUBOCOP_CONFIG: .rubocop.yml
          PRONTO_PULL_REQUEST_ID: ${{ github.event.pull_request.number }}
          PRONTO_GITHUB_ACCESS_TOKEN: "${{ github.token }}"

      - name: Native Rubocop
        run: bundle exec rubocop

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run CSS and JS Pipeline
        run: bundle exec rake spec:prepare

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Yarn install
        run: yarn install

      - name: Setup log directory
        run: mkdir -p log

      - name: Setup test db
        run: bundle exec rake parallel:setup

      - name: Restore cached runtimes
        uses: actions/cache/restore@v4
        with:
          path: tmp/parallel_runtime_rspec.log
          key: parallel_runs

      # Run ruby tests in headless mode
      - name: Ruby tests
        run: xvfb-run -a bundle exec rake parallel:spec

      - name: Cache runtimes
        uses: actions/cache@v4
        with:
          path: tmp/parallel_runtime_rspec.log
          key: parallel_runs

      - name: Pronto Undercover
        run: bundle exec pronto run -r undercover -f github_pr -c origin/${{ github.base_ref }}
        env:
          PRONTO_PULL_REQUEST_ID: ${{ github.event.pull_request.number }}
          PRONTO_GITHUB_ACCESS_TOKEN: "${{ github.token }}"

      - name: Run undercover natively
        run: bundle exec undercover -c origin/${{ github.base_ref }}
